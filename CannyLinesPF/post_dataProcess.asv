%% 1 show the image after filtered by CannyPF
img_origin = im2uint8 (img);
img_cannyPF = edgeMap;
img_edges = zeros(size(img_origin), 'like', img_origin);


figure(1);
imshow([img_origin, img_cannyPF]);

%% 2 show the image after edge chain judgment criteria
xRange = size(img_origin, 2);
edgeCount = zeros(xRange,1);
edgeNumber = size(edgeChains, 1);  

for edgeIdx = 1:edgeNumber
    oneEdgeChain = edgeChains{edgeIdx};
    pointNumber = size(oneEdgeChain, 1);
    for pointIdx = 1:pointNumber
        xCoord = oneEdgeChain(pointIdx, 1) + 1;  % in C/C++ index/coordinate 0-based
        yCoord = oneEdgeChain(pointIdx, 2) + 1;
        
        img_edges(yCoord, xCoord) = 255;
        edgeCount(xCoord) = edgeCount(xCoord) + 1;
    end
end

figure(2);
imshow([img_origin, img_cannyPF, img_edges]);

%% calculate the distribution of edgeChains
figure(3);
imshow(img);
hold on;
plot([244,244], [1,2064], 'Color', 'r', 'LineWidth', 2);
hold on;
plot([2688,2688], [1,2064], 'Color', 'r', 'LineWidth', 2);


halfIdx = size(edgeCount,1)

[val, idx] = max(edgeCount)

%%
% figure; imshow(img);
% [cx,cy,c] = improfile;
% hold on; plot(cx, cy, 'r-', 'LineWidth', 2)
% figure; plot(c);
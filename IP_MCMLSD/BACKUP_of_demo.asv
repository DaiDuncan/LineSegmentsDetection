clear
clc
close all

addpath(genpath('Toolkit/code/'));
addpath(genpath('Toolkit/edges-master/'));
addpath('Toolkit/mcmlsdV2/');


img = imread(['Resources', filesep, 'test.png']);
img = imresize(img, [round(size(img,1)/4), round(size(img,2)/4)]);

%compute the kernel for the image size
%you only need to compute the kernal once for one type of image size
[kernels, kernels_flip, kernel_params] =kernelInitialization(img);

ticId1 = tic;
%the lines variable contains the detected line segmentations it arranged as [x1 y1 x2 y2 probability]
%The fullLines are the detected lines. It is arranged as [rho theta probability]
[lines, fullLines] = lineSegmentation_HighRes(img, kernels, kernels_flip, kernel_params);
disp('here 1');
t1 = toc(ticId1);
disp(['Running time in PHT = ', num2str(toc)]);

fig = figure;
imshow(img);
hold all

%Order lines by probability
lines = sortrows(lines, -5);  % descending
linesNumber = size(lines,1);
plotLineNumber = min(50, linesNumber);
for i = 1:plotLineNumber
    %plot the lines
    line([lines(i,1) lines(i,3)], [lines(i,2) lines(i,4)], 'Color', 'g', 'LineWidth', 1.5);
end


%please use code in Evaluation code.zip to evaluate the performance of the line segmentation algorithm
ticId2 = tic;
[lines2] = mcmlsd2Algo(lines,img);
disp('here 2');
t2 = toc(ticId2);
disp(['Running time in MCMLSD = ', num2str(toc)]);

fig = figure;
imshow(img);
hold all

%Order lines by probability
lines2 = sortrows(lines2, -5);
linesNumber = size(lines2,1);
plotLineNumber = min(30, linesNumber);
for i = 1:plotLineNumber
    %plot the lines
    line([lines2(i,1) lines2(i,3)], [lines2(i,2) lines2(i,4)], 'Color', 'g', 'LineWidth', 1.5);
end
